// IRON: iron_headers
/*
 * Distribution A
 *
 * Approved for Public Release, Distribution Unlimited
 *
 * EdgeCT (IRON) Software Contract No.: HR0011-15-C-0097
 * DCOMP (GNAT)  Software Contract No.: HR0011-17-C-0050
 * Copyright (c) 2015-20 Raytheon BBN Technologies Corp.
 *
 * This material is based upon work supported by the Defense Advanced
 * Research Projects Agency under Contracts No. HR0011-15-C-0097 and
 * HR0011-17-C-0050. Any opinions, findings and conclusions or
 * recommendations expressed in this material are those of the author(s)
 * and do not necessarily reflect the views of the Defense Advanced
 * Research Project Agency.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
/* IRON: end */

/// \brief The IRON timer header file.
///
/// Provides the IRON software with a timer class.


#ifndef IRON_COMMON_TIMER_H
#define IRON_COMMON_TIMER_H

#include "callback.h"
#include "itime.h"

#include <stdint.h>


namespace iron
{
  /// \brief A class for maintaining timer events.
  ///
  /// The expectation is that only one instance of the Timer class will be
  /// created per process.  This instance will be passed to all classes that
  /// need it, allowing each of them to share the same inner Timer instance.
  ///
  /// Future timer events are created using StartTimer(), and this call
  /// generates a unique "handle" for the timer event that is returned to the
  /// caller.  Timer events may be queried or canceled using the assigned
  /// handles.  The main processing loop queries the Timer instance for the
  /// amount of time until the next timer expiration event using
  /// GetNextExpirationTime(), and does useful work until that time arrives.
  /// The main processing loop then calls DoCallbacks() in order to allow the
  /// Timer instance to execute the necessary timer callbacks.
  ///
  /// Internally, the events are stored in an unsorted doubly-linked list.
  /// The next timer event to expire is maintained in order to minimize the
  /// number of searches through the event list.  A pool of unused timer event
  /// structures is stored in a pool to minimize the number of memory
  /// allocations and deallocations that are required.
  class Timer
  {

    // Forward declaration of the internal timer element structure.
    class TimerElem;

   public:

    /// \brief A class for unique timer event handles.
    ///
    /// Timer event handles are generated by the Timer class and returned when
    /// a new timer event is created using StartTimer().  The handle can then
    /// be used to query, modify, or cancel that specific timer event.
    class Handle
    {

     public:

      /// \brief The constructor.
      inline Handle()
          : id_(0), elem_(NULL)
      {}

      /// \brief The destructor.
      virtual ~Handle()
      {
        id_   = 0;
        elem_ = NULL;
      }

      /// \brief Clear the timer event handle.
      inline void Clear()
      {
        id_   = 0;
        elem_ = NULL;
      }

      /// \brief Get the unique integer identifier of the timer handle.
      ///
      /// \return  The unique integer identifier of the timer handle.
      inline uint64_t id() const
      {
        return id_;
      }

     private:

      /// \brief Copy constructor.
      Handle(const Handle& other);

      /// \brief Copy operator.
      Handle& operator=(const Handle& other);

      /// The unique integer identifier for the timer event.  Used to detect
      /// if the timer element has been reused for a different timer event.
      uint64_t    id_;

      /// The pointer to the timer event's element for fast access.
      TimerElem*  elem_;

      friend class Timer;

    }; // end class Handle

    /// \brief Default constructor.
    Timer();

    /// \brief Default destructor.
    virtual ~Timer();

    /// \brief Starts a timer.
    ///
    /// \param  delta_time  The relative (delta) time, from the current time,
    ///                     when the timer will expire.
    /// \param  cb          The callback to be invoked when the timer expires.
    /// \param  handle      A reference where the timer's unique handle will
    ///                     be placed upon success.  This returned handle may
    ///                     be used to query, modify, or cancel the timer.
    ///
    /// \return  Returns true on success, or false otherwise.
    bool StartTimer(const iron::Time& delta_time, CallbackInterface* cb,
                    Handle& handle);

    /// \brief Modify the expiration time for a timer.
    ///
    /// The handle is the unique value returned by the StartTimer() call when
    /// it succeeds.  The callback for the timer event is not modified.
    ///
    /// \param  delta_time  The new relative (delta) time, from the current
    ///                     time, when the timer will expire.
    /// \param  handle      The handle of the timer to be modified.
    ///
    /// \return  Returns true on success, or false otherwise.
    bool ModifyTimer(const iron::Time& delta_time, Handle& handle);

    /// \brief Cancel a timer by its unique handle.
    ///
    /// The handle is the unique value returned by the StartTimer() call when
    /// it succeeds.
    ///
    /// \param  handle  The handle of the timer to be canceled.
    ///
    /// \return  Returns true if the timer was found and canceled, or false if
    ///          the timer could not be found.
    bool CancelTimer(Handle& handle);

    /// \brief Cancel all timers.
    void CancelAllTimers();

    /// \brief Query if a timer event is currently set by its unique handle.
    ///
    /// \param  handle  The handle of the timer to be queried.
    ///
    /// \return  Returns true if the timer event is currently set, or false
    ///          otherwise.
    inline bool IsTimerSet(const Handle& handle) const
    {
      return ((handle.id_ != 0) && (handle.elem_ != NULL) &&
              (handle.id_ == handle.elem_->handle_id));
    }

    /// \brief Get the amount of time from now until the next timer event
    ///        should expire.
    ///
    /// \param  max_wait  The maximum wait time returned.  If no timers are
    ///                   currently set, then this value is returned.
    ///                   Defaults to 1 second if not provided.
    ///
    /// \return  The wait time until the next timer event should expire,
    ///          limited to max_wait.  If there are currently no timer events,
    ///          then max_wait is returned.
    iron::Time GetNextExpirationTime(
      const iron::Time& max_wait = iron::Time(1));

    /// \brief Go through the list of timer events and invoke the associated
    ///        callbacks for those that have expired.
    void DoCallbacks();

   private:

    /// \brief Copy constructor.
    Timer(const Timer& other);

    /// \brief Copy operator.
    Timer& operator=(const Timer& other);

    /// \brief Find the next timer event to expire.
    ///
    /// \return  Returns true if the next timer event is found, or false
    ///          otherwise.
    bool FindNextEvent();

    /// A structure for storing the details of each timer event.
    struct TimerElem
    {
      TimerElem(uint64_t hdl_id, iron::Time exp_time)
          : handle_id(hdl_id), event_time(exp_time), cb(NULL), next(NULL),
            prev(NULL)
      { }

      ~TimerElem()
      {
        if (cb != NULL)
        {
          cb->ReleaseClone();
          cb = NULL;
        }
        next = NULL;
        prev = NULL;
      }

      /// The unique timer-defined identifier for the timer.  Only non-zero
      /// values are valid identifiers.
      uint64_t                  handle_id;

      /// The absolute expiration time associated with this timer.
      iron::Time                event_time;

      /// The callback to be called upon expiration of this timer.
      iron::CallbackInterface*  cb;

      /// The next timer element in the doubly-linked list.
      TimerElem*                next;

      /// The previous timer element in the doubly-linked list.
      TimerElem*                prev;

    }; // end struct TimerElem

    /// The unique handle to assign to the next timer that is created.  Only
    /// non-zero values are valid identifiers.
    uint64_t    next_handle_;

    /// The head element of the doubly-linked list of scheduled timer events.
    TimerElem*  events_head_;

    /// The tail element of the doubly-linked list of scheduled timer events.
    TimerElem*  events_tail_;

    /// The timer element that will expire next.
    TimerElem*  next_event_;

    /// The head element of the singly-linked list of unused timer elements.
    TimerElem*  pool_;

  }; // end class Timer

} //namespace iron

#endif // IRON_COMMON_TIMER_H
