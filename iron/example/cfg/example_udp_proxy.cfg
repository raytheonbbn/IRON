# IRON: iron_headers
#
# Distribution A
#
# Approved for Public Release, Distribution Unlimited
#
# EdgeCT (IRON) Software Contract No.: HR0011-15-C-0097
# DCOMP (GNAT)  Software Contract No.: HR0011-17-C-0050
# Copyright (c) 2015-20 Raytheon BBN Technologies Corp.
#
# This material is based upon work supported by the Defense Advanced
# Research Projects Agency under Contracts No. HR0011-15-C-0097 and
# HR0011-17-C-0050. Any opinions, findings and conclusions or
# recommendations expressed in this material are those of the author(s)
# and do not necessarily reflect the views of the Defense Advanced
# Research Project Agency.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# IRON: end

#
# This is an example UDP Proxy configuration file. It documents all
# UDP Proxy parameters. It should be modified to support the desired
# system configuration.
#

# Include example BinMap configuration file.
#
include example_bin_map.cfg

#
# Configuration for the IRON UDP proxy.
#

########################## LOGGING ###########################################
#
# Set default log levels.
# Options are:
#   F = FATAL (application will abort with a core file generated)
#   E = ERROR
#   W = WARN
#   I = INFO
#   A = ANALYSIS
#   D = DEBUG
#
Log.DefaultLevel FEW

#
# Set class specific log levels. These override the DefaultLevel just for
# log messages within the specified class.
#
#Log.ClassLevels    <class1>=FEWAID;<class2>=FEWI
# For maximum packet tracking, use:
#Log.ClassLevels    Packet=FEWAID;PacketPool=FEWAID

#
# The name of the log file. Can instead be specified via the command line
# (which takes precidence).
#
#Log.File udp_proxy.log

########################## UDP PROXY BEHAVIOR ################################

#
# Minimum time window between admission control timers in microseconds.
#
# Increasing this will increase CPU performance at the expense of making
# traffic more bursty.
#
# Default value is 2000.
#
#BpfMinBurstUsec 2000

#
# Maximum amount of time packets will be held while waiting for earlier
# packets in the same flow.
#
# Packets from latency-sensitive (DHCP=EF) flows that have a non-infinite
# time-to-go will be held for the minimum of this time or the time to go (or
# until all earlier packets have been received). Packets from latency
# insensitive flows will be held for at most this long.
#
# Default value is 0.0. i.e., no reordering.
#
#MaxHoldTimeSec 0.0

# The maximum size (in packets) of the encoded_pkts_queue per flow.
# Once packets are encoded, they are stored in this queue until they are
# admitted into the network by admissions control.
#
#MaxQueueDepthPerFlowPkts 500

#
# How often, in microseconds, to update the queue depths from shared memory.
#
# This parameter effectively manages the freshness of information from the
# BPF. The BPF queues are updated continually as packets arrive and
# depart. Every QueueDepthUpdateIntervalUs microseconds, (or as soon after
# that as the processor is free), the updated queue depths are copied into the
# UDP proxy for local use.
#
# Default value is 1000.
#
#QueueDepthUpdateIntervalUs 1000

#
# Define the garbage collection cleanup interval in seconds.
#
# Default value is 120 seconds.
#
# GCIntervalSec 120

#
# Define the decoder cleanup timeout interval in seconds.
#
# Default value is 120 seconds
#
# DecoderTimeoutSec 120

#
# Enable Loss triage.
#
# Default value is True.
#
# EnableLossTriage true


################ INTERFACE WITH ADMISSION PLANNER ############################

# The statistics collection interval, in milliseconds. When this
# interval expires, the collected statistics are cleared and logged if
# LogStatistics is true.
#
# These statistics are used to communicate values to the admission planner.
# They can also be used for debugging and/or custom operation views.
#
# Default value: 5000
#
# StatsCollectionIntervalMs  5000

# Controls if the collected statistics are written to the Log file.
#
# Default value: true
#
# LogStatistics  true

########################## EXPERIMENTATION ###################################
#
# Indicate whether to overwrite the sequence number and tx timestamp of an MGEN
# packet.
# NOTE: This should only be set to true if the packets are sent over UDP by
# MGEN.  Do not set if sourced by anything other than MGEN!
# none: Do nothing (no overwrite) -- default.
# ow-time: Overwrite timestamp with class Time object (consistent with logs).
# ow-wallclock: Overwrite timestamp with wall clock (for delay comp in ws).
#
# This is useful for measuring IRON-induced latency in MGEN experiments.
MGENDiagnosticsMode ow-wallclock


######################### PLUMBING ###########################################

#
# Define the UDP proxy control port.
# If this isn't set, either here or on the command line, then
# it defaults to 3144
#
#Udp.RemoteControl.Port 3144

#
# The device facing the local network (vs. internet or management subnet).
#
# Default value: em2
#
#InboundDevName em2

######################### SERVICE DEFINITIONS ################################
# Services, or flow/application-specific behaviors, may be defined here and in
# tcp_proxy_common.cfg OR they may be defined in amp-serivces.cfg.
#
# === Tie breaking ===
# If multiple service definitions match a port, the service definition with
# the narrowest port range will be used, regardless of where each service is
# defined (here or in amp_services.cfg). If two service definitions apply to
# exactly the same set of ports, the definition in amp_services.cfg will be
# used (taking precedence over a definition in this file).
#
# === Format ===
#
# Service definitions take the form:
# ServiceX <low-port>-<high-port>;<service definition string>
#
# For the UDP proxy, the <service definition string> has the form:
#
# <Encoding Config>;<Utility Function string>;[<optional=value>;<optional=value>;...]
#
# <Encoding Config> is a semi-colon separated string of the form:
#
# baseRate/totrate;maxChunkSz;maxHoldTimeMsecs;orderFlag;timeout;timeToGo
#
# Each of these is required:
#
#  1) baseRate/totRate is the default FEC encoding rate
#  2) maximum payload chunk size, in bytes (1 to 65535)
#  3) maximum hold time, in msecs, before we force FEC generation (>= 0)
#  4) orderFlag: ~0 -> strict ordering, 0 -> release immediately
#  5) timeout, in sec, how long gateway keeps old state (0 is forever)
#  6) Time-to-go time, in microseconds. A value of 0 indicates that
#     time-to-go time has the maximum value permitted (maximum of signed
#     32-bit quantity).
#
# <utility function string> is defined in a different subsection below.
#
# The optional values supported are: "dscp=XX" and "rord=YYY".
#
# "dscp" value overwrites the dscp field  in each packet under this service.
# "rord" indicates the maximum time a packet can be held while waiting
# for out of order packets on the destination side.
#
# === Utility Function Definitions ===
#
# The utility function is used to determine the admission rate of the
# packets from the flow into the system.
#
# The utility function is defined by a set of colon-separated,
# parameter=<value> pairs. The parameters can be in any order.
# Different utility functions require different parameters.
#
# Currently, there are 3 supported utility functions for the UDP proxy: LOG,
# TRAP, STRAP.
# LOG is for elastic flows. TRAP and STRAP are for inelastic flows.
#
# === TRAP ===
# To configure a TRAP utility, the following parameters must be specified:
#  1) type=TRAP
#  2) m - The average desired rate of the flow in bits per second.
#  3) b - The maximum rate at which packets should be admitted. This should
#         be slightly higher than m, to allow the backlog to drain if there
#         is a spike in packets. The unit is bits per second.
#  4) p - The priority of the flow. This should be a positive integer.
#  5) stepint - The interval in mircosends, between steps. This should be
#         smaller than avgint so that there are several steps when we
#         average the utility over an interval.
#  6) avgint - The interval over which utility is estimated, in microseconds.
#         This should be in the order of a few QLAM intervals.
#  7) nsteps - The number of steps in the trapezoid utility. A STEP utility
#         is a special case of a TRAP utility with a single step.
#  8) resint - The restart interval, in microseconds. The flow will attempt
#         to restart after being off for this duration.
#  9) label - A string to identify the flow in the logs.
#  10) delta - The allowed deviation from the source rate. If the flow is being
#         serviced at a lower rate, it should be triaged.
#
# === LOG ===
#  To configure a LOG utility function, the following parameters must be specified:
#  1) type=LOG
#  2) a - A shape parameter that affects the steepness of the log curve. This should
#         be an integer. The larger a, the steeper the curve values less than 100
#         are usually good.
#  3) m - The maximum rate at which packets should be admitted.
#  4) p - The priority of the flow as a positive integer.
#  5) label - A string to identify the flow in the logs.
#
# === STRAP ===
#  To configure a STRAP utility function, the following parameters can be specified:
#  1) type=STRAP
#  2) p - The priority of the flow. This should be a positive integer.
#  3) label - A string to identify the flow in the logs.
#  The STRAP utility function supports the following optional parameters.
#  4) stepint - The interval in mircosends, between steps. This should be
#         smaller than avgint so that there are several steps when we
#         average the utility over an interval.
#  5) avgint - The interval over which utility is estimated, in microseconds.
#         This should be in the order of a few QLAM intervals.
#  6) nsteps - The number of steps in the trapezoid utility. A STEP utility
#         is a special case of a TRAP utility with a single step.
#  7) resint - The restart interval, in microseconds. The flow will attempt
#         to restart after being off for this duration.
#  8) delta - The allowed deviation from the source rate. If the flow is being
#         serviced at a lower rate, it should be triaged.
#
# === Example service definitions ===
#
# Ports 30700-30749 have no FEC. Normal latency packets, Log utility function,
# priority 1.
#Service0 30700-30749;1/1;1500;0;0;120;0;type=LOG:a=10:m=2800000:p=1:label=p1
#
# Ports 30750-30799 are latency-sensitive packets with a time-to-go of 60 ms,
# Log utility function, priority 5.
#Service1 30750-30799;1/1;1500;0;0;120;60000;type=LOG:a=10:m=2800000:p=5:label=p5ef;dscp=46
#
# Ports 40000-40100 is a STRAP flow with priority 2.
#Service2 40000-40100;1/1;1500;0;0;120;0;type=STRAP:p=2:label=strap_flow_1


#
# defaultService is intended as a catch-all to define the behavior whenever
# there is no applicable service definition. There is a default service
# definition defined in the code, but it can be overwritten with this
# parameter.
#
#defaultService 1-65535;1/1;1500;0;0;120;0;type=LOG:a=20:m=10000000:p=1:label=default_service
