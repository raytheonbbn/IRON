# IRON: iron_headers
#
# Distribution A
#
# Approved for Public Release, Distribution Unlimited
#
# EdgeCT (IRON) Software Contract No.: HR0011-15-C-0097
# DCOMP (GNAT)  Software Contract No.: HR0011-17-C-0050
# Copyright (c) 2015-20 Raytheon BBN Technologies Corp.
#
# This material is based upon work supported by the Defense Advanced
# Research Projects Agency under Contracts No. HR0011-15-C-0097 and
# HR0011-17-C-0050. Any opinions, findings and conclusions or
# recommendations expressed in this material are those of the author(s)
# and do not necessarily reflect the views of the Defense Advanced
# Research Project Agency.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# IRON: end

# This is an example process.cfg file.
#
# mgen: plots the received traffic at the application nodes
# Usage process.cfg lines should be as follows
# mgen goodput/latency/loss pdf/png lines/nolines key/nokey ramp/noramp
# 
# Plot type: goodput/latency/loss: What data is being plotted
#
# Output format: pdf/png: pdfs will be larger, but higher quality. If running
#       remotely and pdf tools are not available, process.sh will force png
# 
# Plot style: lines/nolines: Determines whether data points are connected by
# lines or if they are just left as dots.
#
# Legend: key/nokey: If selected, a legend will be added to the left of the
# graph. For best results, do not use key when there are large numbers of flow
#
# Line Style: Whether data points are connected using diagonal lines or treated
# as a single value between data points (blocks). Changing this can help to 
# show overlapping lines better.
#
# Window: The size of the window over which to average packets, in seconds.
# The default value of 1.0 seconds will be applied if a value is not specified.
# Example mgen lines:
#
mgen goodput pdf lines key noramp 0.1
mgen latency pdf lines nokey ramp 1.0
mgen loss png nolines key noramp 
#
# Additionally, process.sh handles calls to other processing scripts in the
# scripts directory. For additional information on these scripts, please see
# the usage section of the individual scripts. 
#
# Notes: process.sh will automatically add the path to the logs and scripts.
# Usage for how to specify these paths can be found in process.sh. For standard
# process.cfg files, just include the name of the file being referenced, with 
# no path to it. 
#
# The following are example lines for process.cfg and a brief explanation of
# the task performed. 
#
bash process_logs.sh
# Checks bpf.log, udp_proxy.log, tcp_proxy.log for warning, error, and fatal
# error messages. This should be a part of the majority of process.cfg files.
#
bash gprof.sh
# Performs gprof analysis on the gmon log for each iron component on each iron
# node. Also performs analysis across nodes. Results are put in the results
# folder of each iron node. No arguments are needed for this script, but be
# sure to source gprof.bash for build mode. Use with the following experiments: 
# 3-node-perf, 3-node-tcp-perf, 3-node-udp-perf.
#
python plotSR.py udp_proxy.log
# Plots the instantaneous send rate and queue depths in the UDP proxy. This is
# done by parsing the udp_proxy.log file. 
# 
python plot_udp_pkt_loss.py -l udp_proxy.log
# Plots packets dropped by the UDP proxy, over time, as seen at the destination
# proxy.
python plot_bpf_pkt_loss.py -l bpf.log 
# Plots UDP packets dropped by the BPF, over time. This includes drops in the
# forwarding algorithm and in the CATs. This only works for packets proxied by
# the UDP proxy and not the TCP proxy.
#
python plot_bpf.py bpf.log
# Plots bpf queue lengths in bytes
#
python plot_debug_stat.py <iron_comp>.log <stat>
# Script plots the value of an arbitrary debugging statistic. This pases in
# the passed-in log for a line lie the following:
# .... <stat name>, avg: <avg>, min: <min> max: <max>.   
# Generates a plot  <stat>.png
#
python plot_packets_owned.py bpf.log udp_proxy.log tcp_proxy.log
# Plots the number of packets owned over time by the BPF, TCP proxy and UDP
# proxy. Generates a plot called packets_owned.png
#
python plotUtil.py udp_proxy.log tcp_proxy.log
# Plots instantaneous send utility vales as seen by the proxies.
#
python process_mgen.py mgen.log <min port to consider>
# This script computes the total number of bytes received in an mgen log.
#
# Scripts that need to be updated to work with process.sh
bash get_perf.sh

bash get_perf_results.sh
# 
# Scripts that should work for post processing but need updating for running
# during experiment processing 
python map_lost_udp_pkts.py
# 
# Scripts that can be moved to boneyard(?)
python plot_k.py
