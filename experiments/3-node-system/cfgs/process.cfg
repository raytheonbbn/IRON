# IRON: iron_headers
#
# Distribution A
#
# Approved for Public Release, Distribution Unlimited
#
# EdgeCT (IRON) Software Contract No.: HR0011-15-C-0097
# DCOMP (GNAT)  Software Contract No.: HR0011-17-C-0050
# Copyright (c) 2015-20 Raytheon BBN Technologies Corp.
#
# This material is based upon work supported by the Defense Advanced
# Research Projects Agency under Contracts No. HR0011-15-C-0097 and
# HR0011-17-C-0050. Any opinions, findings and conclusions or
# recommendations expressed in this material are those of the author(s)
# and do not necessarily reflect the views of the Defense Advanced
# Research Project Agency.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# IRON: end
#
# Post processing configuration file.
#
#=============================================================================
# mgen: plots the received traffic at the application nodes.
#
# The format for the mgen target is as follows:
#
# mgen <plot_type> <output_format> <plot_style> <legend> <line_style> <window>
#
# where,
#
# <plot_type> is one of goodput, latency, or loss and identifies the
# data to plot.
#
# <output_format> is either pdf or png. pdfs will be larger, but
# higher quality. If running remotely and pdf tools are not available,
# png will be used.
#
# <plot_style> is either lines or nolines and determines whether data
# points are connected by lines or if they are just left as dots.
#
# <legend> is either key or nokey. If key is selected, a legend will
# be added to the left of the graph. For best results, do not use key
# when there are large numbers of flows.
#
# <line_style> is either ramp or noramp and determines whether data
# points are connected using diagonal lines or treated as a single
# value between data points (blocks). Changing this can help to show
# overlapping lines better.
#
# <window> is the size of the window over which to average packets, in
# seconds.  The default value of 1.0 seconds will be applied if a
# value is not specified.
#
# <yscaling> is either log or linear. The default value of linear will
# be used if a value is not specified
#
# Example mgen lines:
#
mgen goodput png lines nokey ramp 1.0 linear regress
mgen latency png lines nokey ramp 1.0 linear regress
mgen loss png nolines nokey ramp 1.0 linear regress
#
# Additionally, the post processing script, process.sh, handles calls
# to other processing scripts in the scripts directory. For additional
# information on these scripts, please see the usage section of the
# individual scripts.
#
# Notes: the process.sh script will automatically add the path to the
# logs and scripts.  Usage for how to specify these paths can be found
# in process.sh script. For standard process.cfg files, just include
# the name of the file being referenced, with no path to it.
#
# The following are example lines for process.cfg and a brief explanation of
# the task performed.
#
#=============================================================================
# Log file processing: Checks bpf.log, udp_proxy.log, tcp_proxy.log
# for warning, error, and fatal error messages. This should be a part
# of the majority of process.cfg files.
bash process_logs.sh
#
#=============================================================================
# Profiling: Performs gprof analysis on the gmon log for each iron
# component on each iron node. Also performs analysis across
# nodes. Results are put in the results folder of each iron node. No
# arguments are needed for this script, but be sure to source
# gprof.bash for build mode. Currently used with the following
# experiments: 3-node-perf, 3-node-tcp-perf, 3-node-udp-perf.
#
# bash gprof.sh
#
#=============================================================================
# Packet analyses:
#
#-----------------------------------------------------------------------------
# Plots the instantaneous send rate and queue depths in the UDP
# proxy. This is done by parsing the udp_proxy.log file.
#
# python plotSR.py udp_proxy.log
#
#-----------------------------------------------------------------------------
# Plots packets dropped by the UDP proxy, over time, as seen at the
# destination proxy.
#
# python plot_udp_pkt_loss.py -l udp_proxy.log
#
#-----------------------------------------------------------------------------
# Plots UDP packets dropped by the BPF, over time. This includes drops
# in the forwarding algorithm and in the CATs. This only works for
# packets proxied by the UDP proxy and not the TCP proxy.
#
# python plot_bpf_pkt_loss.py -l bpf.log
#
#-----------------------------------------------------------------------------
# Plots bpf queue lengths in bytes.
#
# python plot_bpf.py bpf.log
#
#-----------------------------------------------------------------------------
# Script plots the value of an arbitrary debugging statistic. This
# pases in the passed-in log for a line lie the following: .... <stat
# name>, avg: <avg>, min: <min> max: <max>. Generates a plot
# <stat>.png
#
# python plot_debug_stat.py <iron_comp>.log <stat>
#
#-----------------------------------------------------------------------------
# Plots the number of packets owned over time by the BPF, TCP proxy
# and UDP proxy. Generates a plot called packets_owned.png
#
# python plot_packets_owned.py bpf.log udp_proxy.log tcp_proxy.log
#
#-----------------------------------------------------------------------------
# Plots instantaneous send utility vales as seen by the proxies.
#
# python plotUtil.py udp_proxy.log tcp_proxy.log
#
#-----------------------------------------------------------------------------
# This script computes the total number of bytes received in an mgen log.
#
# python process_mgen.py mgen.log <min port to consider>
